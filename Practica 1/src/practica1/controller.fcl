FUNCTION_BLOCK aceleracion

VAR_INPUT
    s0 : REAL;
    s1 : REAL;
    s2 : REAL;  
    s3 : REAL;
    s4 : REAL;
    s5 : REAL; 
    s6 : REAL;
    s7 : REAL;
    s8 : REAL;
    sig : REAL;
END_VAR

VAR_OUTPUT
    vel : REAL;
    rot : REAL;
END_VAR

//EJEMPLO de definici贸n NO VINCULANTE. Hacer lo mismo para los 7 sensores restantes
FUZZIFY s0
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s1
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s2
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s3
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s4
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s5
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s6
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s7
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s8
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY sig
    TERM izquierdam :=    (-180,0) (0,0) (180,1);
    TERM izquierda  :=    (-180,0) (-90,0) (0,1) (90,1) (180,0);
    TERM recto      :=    (-180,0) (-90,0) (-30,1) (30,1) (90,0) (180,0);
    TERM derecha    :=    (-180,0) (-90,1) (0,1) (90,0) (180,0);
    TERM derecham   :=    (-180,1) (0,0) (180,0);
END_FUZZIFY

//EJEMPLO de definici贸n NO VINCULANTE
DEFUZZIFY vel
    TERM fast   := (0,0) (2.5,1);
    TERM med    := (0,0) (1,1) (2.5,0);
    TERM slow   := (0,1) (2.5,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 1;
END_DEFUZZIFY

//EJEMPLO de definici贸n NO VINCULANTE
DEFUZZIFY rot
    TERM izqm   :=    (-10,0) (0,0) (10,1);
    TERM izq    :=    (-10,0)(-5,0) (0,1) (5,1) (10,0);
    TERM cen    :=    (-10,0) (-5,0) (-2.5,1) (2.5,1) (5,0);
    TERM der    :=    (-10,0) (-5,1) (0,1) (5,0) (10,0);
    TERM derm   :=    (-10,1) (0,0) (10,0);

    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

//Reglas por defecto
//EJEMPLO de definici贸n de reglas NO VINCULANTE
RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : PROD;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    //Definir las reglas del SE
    
    RULE 0: IF s0 IS near THEN vel is slow;
    
    RULE 1: IF s1 IS near THEN rot IS derm;
    RULE 2: IF s1 IS med THEN rot IS derm;
    RULE 3: IF s2 IS near THEN rot IS derm;
    RULE 4: IF s2 IS med THEN rot IS derm;
    RULE 5: IF s3 IS near THEN rot IS derm;
    RULE 6: IF s3 IS med THEN rot IS derm;

    RULE 7: IF s8 IS near THEN rot IS izqm;
    RULE 8: IF s8 IS med THEN rot IS izqm;
    RULE 9: IF s7 IS near THEN rot IS izqm;
    RULE 10: IF s7 IS med THEN rot IS izqm;
    RULE 11: IF s6 IS near THEN rot IS izqm;
    RULE 12: IF s6 IS med THEN rot IS izqm;
    
    RULE 13: IF sig IS recto THEN rot IS cen;
    RULE 14: IF sig IS izquierdam THEN rot IS izqm;
    RULE 15: IF sig IS derecha THEN rot IS der;
    RULE 16: IF sig IS derecham THEN rot IS derm;

END_RULEBLOCK

END_FUNCTION_BLOCK
